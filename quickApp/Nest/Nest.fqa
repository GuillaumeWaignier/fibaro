{"name":"Nest ","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_245"},"sections":{"items":[]}},"head":{"title":"quickApp_device_245"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"projectId","type":"string","value":"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"},{"name":"clientId","type":"string","value":"xxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com"},{"name":"clientSecret","type":"string","value":"xxxxxxxxxxxxxxxxxxxxxxxx"},{"name":"code","type":"string","value":"4/xxxxxxxxxxxx"},{"name":"frequency","type":"string","value":"60"},{"name":"refreshToken","type":"string","value":"-"},{"name":"gcpProjectId","type":"string","value":"domotique-xxxxxxxxxxxxx"},{"name":"subscription","type":"string","value":"fibaro"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":false,"content":"-- Device Controller is a little more advanced than other types. \n-- It can create child devices, so it can be used for handling multiple physical devices.\n-- E.g. when connecting to a hub, some cloud service or just when you want to represent a single physical device as multiple endpoints.\n-- \n-- Basic knowledge of object-oriented programming (oop) is required. \n-- Learn more about oop: https://en.wikipedia.org/wiki/Object-oriented_programming \n-- Learn more about managing child devices: https://manuals.fibaro.com/home-center-3-quick-apps/\n-- Author: Guillaume Waignier\n-- Apache License 2.0\n\nfunction QuickApp:onInit()\n    self:debug(\"QuickApp:onInit\")\n\n    self:initializeProperties()\n\n    -- Setup classes for child devices.\n    -- Here you can assign how child instances will be created.\n    -- If type is not defined, QuickAppChild will be used.\n    self:initChildDevices({\n        [\"com.fibaro.hvacSystemAuto\"] = NestThermostat,\n        [\"com.fibaro.temperatureSensor\"] = NestThermostatTemperature,\n        [\"com.fibaro.humiditySensor\"] = NestThermostatHumidity,\n        [\"com.fibaro.motionSensor\"] = NestMotionPerson\n    })\n\n    -- Build device map\n    self.devicesMap = {}\n    self:trace(\"Child devices:\")\n    for id,device in pairs(self.childDevices)\n    do\n        local uid = device:getVariable(\"uid\")\n        if uid ~= \"\"\n        then\n            self.devicesMap[uid] = id\n            local message = string.format(\"[%d] %s of type %s with UID %s\", id, device.name, device.type, uid)\n            self:trace(message)\n        else\n            local message = string.format(\"[%d] %s of type %s has no UID\", id, device.name, device.type)\n            self:error(message)\n            api.delete('/devices/' .. id)\n        end\n    end\n\n    --start\n    self:mainLoop()\n    if self.gcpProjectId ~= nil\n    then\n        self:getPubSubEvent()\n    end\nend\n\nfunction QuickApp:initializeProperties()\n    self.projectId = self:getVariable(\"projectId\")\n    assert(self.projectId ~= \"\", \"projectId is not set\")\n    \n    self.clientId = self:getVariable(\"clientId\")\n    assert(self.clientId ~= \"\", \"clientId is not set\")\n\n    self.clientSecret = self:getVariable(\"clientSecret\")\n    assert(self.clientSecret ~= \"\", \"clientSecret is not set\")\n\n    self.code = self:getVariable(\"code\")\n    assert(self.code ~= \"\", \"code is not set\")\n\n    self.frequency = self:getVariable(\"frequency\")\n    assert(self.frequency ~= \"\", \"frequency is not set\")\n    self.frequency = tonumber(self.frequency)\n    assert(self.frequency ~= nil, \"frequency is not a number\")\n\n    self.refreshToken = self:getVariable(\"refreshToken\")\n    if (self.refreshToken == \"\")\n    then\n      self:warning(\"set refresh token to null\")\n      self:setVariable(\"refreshToken\", \"\")\n    end\n\n    self.gcpProjectId = self:getVariable(\"gcpProjectId\")\n    if (self.gcpProjectId == \"\")\n    then\n      self:warning(\"gcpProjectId is not set. Disable pubsub (no camera or dorbell support)\")\n      self.gcpProjectId = nil\n    else\n      self.subscription = self:getVariable(\"subscription\")\n      assert(self.subscription ~= \"\", \"subscription is not set and is mandatory when gcpProjectId is set\")\n    end\n    \n    self.accessToken = nil\n\n    self.step = \"accessToken\"\n    if self.refreshToken == \"\"\n    then\n      self.step = \"refreshToken\"\n    end\n\n    self.maxLogDebugPubSub = 10\n\n    QuickApp.http = net.HTTPClient({ timeout = 10000 })\n    QuickApp.pubsub = net.HTTPClient({ timeout = 60000 })\nend\n\n\nfunction QuickApp:mainLoop()\n    --login\n    self:sendMailForRefreshToken()\n    self:getRefreshToken()\n    self:getAccessToken()\n\n    --get Nest devices\n    self:listNestDevice()\n\n    fibaro.setTimeout(self.frequency * 1000, function()\n        self:mainLoop()\n    end)\nend\n\n-- Send a mail to request a new a new Refresh Token\nfunction QuickApp:sendMailForRefreshToken()\n    if (self.step ~= \"mail\")\n    then\n        return\n    end\n        \n    local url = string.format(\"https://nestservices.google.com/partnerconnections/%s/auth?redirect_uri=https://www.google.com%%26access_type=offline%%26prompt=consent%%26client_id=%s%%26response_type=code%%26scope=https://www.googleapis.com/auth/sdm.service%%20https://www.googleapis.com/auth/pubsub\",self.projectId, self.clientId)\n\n    -- mail\n    local mail = string.format(\"Need to refresh Nest Authentication code for quickApp %d. Please be sure to copy/paste the full URL in a web browser : %s\", self.id, url:gsub(\"%%20\",\"+\"))\n    fibaro.alert(\"email\", {2}, mail)\n\n    -- log\n    local html = string.format(\"<html><body>Need to refresh Nest Authentication code for quickApp %d with <a href=\\\"%s\\\" target=\\\"_blank\\\">%s</a></body></html>\", self.id, url:gsub(\"%%26\",\"&\"), url:gsub(\"%%26\",\"&\"))\n    self:error(html)\n\n    -- notification\n    local m ={canBeDeleted=true,wasRead=false,priority=\"alert\",type=\"GenericDeviceNotification\",data={deviceId=tonumber(self.id),subType=\"DeviceNotConfigured\",title=\"Nest Authentication Code\",text=html}}\n    api.post(\"/notificationCenter\",m)\n\n    self.step = \"nothing\"\nend\n\n\nfunction QuickApp:getRefreshToken()\n    if self.step ~= \"refreshToken\"\n    then\n        return\n    end\n\n    self:debug(\"Get Google refresh token\")\n\n    local url = string.format(\"https://www.googleapis.com/oauth2/v4/token?client_id=%s&client_secret=%s&code=%s&grant_type=authorization_code&redirect_uri=https://www.google.com\", self.clientId, self.clientSecret, self.code)\n\n    self.http:request(url , {\n        options = {\n            checkCertificate = true,\n            method = 'POST',\n            headers = {},\n            data = nil\n        },\n        success = function(response)\n            -- self:debug(json.encode(response))\n            if response.status == 200 then\n                body = json.decode(response.data)\n                self.accessToken = \"Bearer \" .. body['access_token']\n                self.refreshToken = body['refresh_token']\n                self:setVariable(\"refreshToken\", self.refreshToken)\n                self.step = \"device\"\n                self:debug(\"getRefreshToken() succeed\")\n                self:trace(self.accessToken .. \"   \" ..  self.refreshToken)\n            else\n                self:error(\"getRefreshToken() status is \" .. response.status .. \": \" .. response.data)\n                self.step=\"mail\"\n            end\n        end,\n        error = function(error)\n            self:error(\"getRefreshToken() failed: \" .. json.encode(error))\n            self.step=\"mail\"\n        end\n    })\nend\n\nfunction QuickApp:getAccessToken()\n    if self.step ~= \"accessToken\"\n    then\n        return\n    end\n\n    local url = string.format(\"https://www.googleapis.com/oauth2/v4/token?client_id=%s&client_secret=%s&refresh_token=%s&grant_type=refresh_token\", self.clientId, self.clientSecret, self.refreshToken)\n    self.http:request(url , {\n        options = {\n            checkCertificate = true,\n            method = 'POST',\n            headers = {},\n            data = nil\n        },\n        success = function(response)\n            if response.status == 200 then\n                body = json.decode(response.data)\n                self.accessToken = \"Bearer \" .. body['access_token']\n                self.step = \"device\"\n                --self:debug(\"getAccessToken() succeed \" .. self.accessToken)\n            else\n                self:error(\"getAccessToken() status is \" .. response.status .. \": \" .. response.data)\n                self:setVariable(\"refreshToken\", \"\")\n                self.step = \"refreshToken\"\n            end\n        end,\n        error = function(error)\n            self:error(\"getAccessToken() failed: \" .. json.encode(error))\n            self:setVariable(\"refreshToken\", \"\")\n            self.step = \"refreshToken\"\n        end\n    })\nend\n\nfunction QuickApp:listNestDevice()\n    if self.step ~= \"device\"\n    then\n        return\n    end\n\n      self.http:request(\"https://smartdevicemanagement.googleapis.com/v1/enterprises/\" .. self.projectId .. \"/devices\" , {\n        options = {\n            checkCertificate = true,\n            method = 'GET',\n            headers = {\n                 ['Content-Type'] = \"application/json; charset=utf-8\",\n                 ['Authorization'] = self.accessToken\n            },\n            data = nil\n        },\n        success = function(response)\n            if response.status == 200 then\n                body = json.decode(response.data)\n                self:updateNestDevices(body)\n            elseif response.status == 401 then\n                self.step = \"accessToken\"\n            else\n                self:error(\"listNestDevice() status is \" .. response.status .. \": \" .. response.data)\n            end\n        end,\n        error = function(error)\n            self:error(\"listNestDevice() failed: \" .. json.encode(error))\n        end\n    })\nend\n\nfunction QuickApp:updateNestDevices(body)\n  devices = body['devices']\n  --self:debug(\"updateNestDevices()\", json.encode(devices))\n\n  for i, device in ipairs(devices)\n  do\n    local name = device['name']\n    if device['traits']['sdm.devices.traits.ThermostatTemperatureSetpoint'] ~= nil\n    then\n        local fibaroDevice = self:getOrCreateChildDevice(name, device, \"com.fibaro.hvacSystemAuto\")\n        fibaroDevice:updateDevice(device)\n    end\n    if device['traits']['sdm.devices.traits.Temperature'] ~= nil\n    then\n         local fibaroDevice = self:getOrCreateChildDevice(name .. \"Temperature\", device, \"com.fibaro.temperatureSensor\")\n        fibaroDevice:updateDevice(device)\n    end\n    if device['traits']['sdm.devices.traits.Humidity'] ~= nil\n    then\n         local fibaroDevice = self:getOrCreateChildDevice(name .. \"Humidity\", device, \"com.fibaro.humiditySensor\")\n        fibaroDevice:updateDevice(device)\n    end\n  end\nend\n \n-- Get or create child device\nfunction QuickApp:getOrCreateChildDevice(name, device, type)\n  local id = self.devicesMap[name]\n  if id \n  then\n    return self.childDevices[id]\n  else\n    return self:createChild(name, device, type)\n  end\nend\n\n\n-- Create fibaro child device\nfunction QuickApp:createChild(name, device, type)\n    local child = nil\n\n    if type  == 'com.fibaro.hvacSystemAuto'\n    then\n        child = self:createChildDevice({name = name,type = \"com.fibaro.hvacSystemAuto\"}, NestThermostat)\n    elseif type == \"com.fibaro.temperatureSensor\"\n    then\n        child = self:createChildDevice({name = name,type = \"com.fibaro.temperatureSensor\"}, NestThermostatTemperature)\n    elseif type == \"com.fibaro.humiditySensor\"\n    then\n        child = self:createChildDevice({name = name,type = \"com.fibaro.humiditySensor\"}, NestThermostatHumidity)\n    elseif type == \"com.fibaro.motionSensor\"\n    then\n        child = self:createChildDevice({name = name,type = \"com.fibaro.motionSensor\"}, NestMotionPerson)\n    end\n\n\n    child:setVariable(\"uid\", name)\n    self.devicesMap[name] = child.id\n\n    local message = string.format(\"Child device created: %s of type %s\", child.id, child.type)\n    self:trace(message)\n\n    return child\nend\n"},{"name":"Thermostat","isMain":false,"isOpen":false,"content":"-----------------------------------------------------------------------------\n--                  NEST THERMOSTAT                                        --\n--                  type: com.fibaro.hvacSystemAuto                        --\n-----------------------------------------------------------------------------\nclass 'NestThermostat' (QuickAppChild)\n\n-- __init is a constructor for this class. All new classes must have it.\nfunction NestThermostat:__init(device)\n    -- You should not insert code before QuickAppChild.__init. \n    QuickAppChild.__init(self, device) \n\n    self:trace(\"NestThermostat init\")\n\n    -- set supported modes for thermostat\n    self:updateProperty(\"supportedThermostatModes\", {})\n\n    -- setup default values\n    self:updateProperty(\"thermostatMode\", \"Off\")\n    self:updateProperty(\"heatingThermostatSetpoint\", 8)\n    self:updateProperty(\"coolingThermostatSetpoint\", 30)\n    self:updateProperty(\"log\", \"\")\nend\n\nfunction NestThermostat:updateDevice(body)\n    --self:debug(\"updateDevice \" .. self.id .. \" with body \" .. json.encode(body))\n    \n    self:updateMode(body)\n    self:updateTemperatureSetPoint(body)\n    self:updateHvacStatus(body)\nend\n\nfunction NestThermostat:updateMode(body) \n    self:updateAvailableModes(body)\n\n    thermostatMode = body['traits']['sdm.devices.traits.ThermostatMode']['mode']\n    thermostatModeEco = body['traits']['sdm.devices.traits.ThermostatEco']['mode']\n\n    if thermostatMode == \"OFF\" then\n        self:updateProperty(\"thermostatMode\", \"Off\")\n    elseif thermostatModeEco == 'MANUAL_ECO' then\n        self:updateProperty(\"thermostatMode\", \"Eco\")\n    elseif thermostatMode == \"HEAT\" then\n        self:updateProperty(\"thermostatMode\", \"Heat\")\n    elseif thermostatMode == \"COOL\" then\n        self:updateProperty(\"thermostatMode\", \"Cool\")\n    elseif thermostatMode == \"HEATCOOL\" then\n        self:updateProperty(\"thermostatMode\", \"Auto\")\n    else\n      self:error(\"updateMode() failed\", \"Unknown mode \" .. thermostatMode .. \" / \" .. thermostatModeEco)\n    end\nend\n\nfunction NestThermostat:updateAvailableModes(body)\n    local thermostatAvailableMode = body['traits']['sdm.devices.traits.ThermostatMode']['availableModes']\n    local thermostatAvailableModeEco = body['traits']['sdm.devices.traits.ThermostatEco']['availableModes']\n\n    local index=1\n    local supportedThermostatModes = {}\n\n    for i,mode in ipairs(thermostatAvailableMode)\n    do\n      if mode == \"OFF\"\n      then\n        supportedThermostatModes[index] = \"Off\"\n        index = index+1\n      end\n      if mode == \"HEAT\"\n      then\n        supportedThermostatModes[index] = \"Heat\"\n        index = index+1\n      end\n      if mode == \"COOL\"\n      then\n        supportedThermostatModes[index] = \"Cool\"\n        index = index+1\n      end\n      if mode == \"HEATCOOL\"\n      then\n        supportedThermostatModes[index] = \"Auto\"\n        index = index+1\n      end\n    end\n    for i,mode in ipairs(thermostatAvailableModeEco)\n    do\n      if mode == \"MANUAL_ECO\"\n      then\n        supportedThermostatModes[index] = \"Eco\"\n        index = index+1\n      end\n    end\n    self:updateProperty(\"supportedThermostatModes\", supportedThermostatModes)\nend\n\nfunction NestThermostat:updateTemperatureSetPoint(body)\n    if body['traits']['sdm.devices.traits.ThermostatTemperatureSetpoint']['heatCelsius'] ~= nil\n    then\n      local temp = body['traits']['sdm.devices.traits.ThermostatTemperatureSetpoint']['heatCelsius']\n      local roundedValue = math.ceil(temp * 10) / 10\n      self:updateProperty(\"heatingThermostatSetpoint\", roundedValue)\n    end\n\n    if body['traits']['sdm.devices.traits.ThermostatTemperatureSetpoint']['coolCelsius'] ~= nil\n    then\n      local temp = body['traits']['sdm.devices.traits.ThermostatTemperatureSetpoint']['coolCelsius']\n      local roundedValue = math.ceil(temp * 10) / 10\n      self:updateProperty(\"coolingThermostatSetpoint\", roundedValue)\n    end\n\n    if (self.properties.thermostatMode == \"Eco\")\n    then\n      if body['traits']['sdm.devices.traits.ThermostatEco']['heatCelsius'] ~= nil\n      then\n        local temp = body['traits']['sdm.devices.traits.ThermostatEco']['heatCelsius']\n        local roundedValue = math.ceil(temp * 10) / 10\n        self:updateProperty(\"heatingThermostatSetpoint\", roundedValue)\n      end\n      if body['traits']['sdm.devices.traits.ThermostatEco']['coolCelsius'] ~= nil\n      then\n        local temp = body['traits']['sdm.devices.traits.ThermostatEco']['coolCelsius']\n        local roundedValue = math.ceil(temp * 10) / 10\n        self:updateProperty(\"coolingThermostatSetpoint\", roundedValue)\n      end\n    end\nend\n\nfunction NestThermostat:updateHvacStatus(body)\n    if body['traits']['sdm.devices.traits.ThermostatHvac'] ~= nil\n    then\n      local status = body['traits']['sdm.devices.traits.ThermostatHvac']['status']\n      self:updateProperty(\"log\", status)\n    else\n      self:updateProperty(\"log\", \"\")\n    end\nend\n\n-- handle action for mode change \nfunction NestThermostat:setThermostatMode(mode)\n    self:debug(\"update mode \" .. mode)\n    \n    if mode == 'Eco' then\n        self:callNestApi(\"sdm.devices.commands.ThermostatMode.SetMode\",\n            {['mode'] = \"HEAT\"},\n            function()\n                self:callNestApi(\"sdm.devices.commands.ThermostatEco.SetMode\",\n                    {['mode'] = \"MANUAL_ECO\"},\n                    function()\n                        self:updateProperty(\"thermostatMode\", mode)\n                    end\n                )\n            end\n        )\n    elseif mode == 'Off' then\n        self:callNestApi(\"sdm.devices.commands.ThermostatMode.SetMode\",\n            {['mode'] = \"OFF\"},\n            function()\n                 self:updateProperty(\"thermostatMode\", mode)\n            end\n        )\n    elseif mode == 'Heat' then\n        self:callNestApi(\"sdm.devices.commands.ThermostatMode.SetMode\",\n            {['mode'] = \"HEAT\"},\n            function()\n                self:callNestApi(\"sdm.devices.commands.ThermostatEco.SetMode\",\n                    {['mode'] = \"OFF\"},\n                    function()\n                        self:updateProperty(\"thermostatMode\", mode)\n                    end\n                )\n            end\n        )\n    elseif mode == 'Cool' then\n        self:callNestApi(\"sdm.devices.commands.ThermostatMode.SetMode\",\n            {['mode'] = \"COOL\"},\n            function()\n                self:callNestApi(\"sdm.devices.commands.ThermostatEco.SetMode\",\n                    {['mode'] = \"OFF\"},\n                    function()\n                        self:updateProperty(\"thermostatMode\", mode)\n                    end\n                )\n            end\n        )\n    elseif mode == 'Auto' then\n        self:callNestApi(\"sdm.devices.commands.ThermostatMode.SetMode\",\n            {['mode'] = \"HEATCOOL\"},\n            function()\n                self:callNestApi(\"sdm.devices.commands.ThermostatEco.SetMode\",\n                    {['mode'] = \"OFF\"},\n                    function()\n                        self:updateProperty(\"thermostatMode\", mode)\n                    end\n                )\n            end\n        )\n    else\n        self:error(\"Unknow mode \" .. mode)\n    end\nend\n\n-- handle action for setting set point for heating\nfunction NestThermostat:setHeatingThermostatSetpoint(value)\n    self:debug(string.format('Update heating temperature %f%s with mode %s', value, self.properties.unit, self.properties.thermostatMode))\n    \n    local roundedValue = self:getDegreesCelsius(value)\n\n    if (self.properties.thermostatMode == \"Heat\")\n    then\n      self:callNestApi(\"sdm.devices.commands.ThermostatTemperatureSetpoint.SetHeat\",\n          {['heatCelsius'] = roundedValue},\n          function()\n              self:updateProperty(\"heatingThermostatSetpoint\", roundedValue)\n          end\n      )\n    elseif (self.properties.thermostatMode == \"Auto\")\n    then\n      self:debug('Original coolingThermostatSetpoint ' .. self.properties.coolingThermostatSetpoint)\n      self:callNestApi(\"sdm.devices.commands.ThermostatTemperatureSetpoint.SetRange\",\n          {['heatCelsius'] = roundedValue, ['coolCelsius'] = self.properties.coolingThermostatSetpoint},\n          function()\n              self:updateProperty(\"heatingThermostatSetpoint\", roundedValue)\n          end\n      )\n    end\nend\n\n-- handle action for setting set point for cooling\nfunction NestThermostat:setCoolingThermostatSetpoint(value)\n    self:debug(string.format('Update cooling temperature %f%s with mode %s', value, self.properties.unit, self.properties.thermostatMode))\n\n    local roundedValue = self:getDegreesCelsius(value)\n\n    if (self.properties.thermostatMode == \"Cool\")\n    then\n      self:callNestApi(\"sdm.devices.commands.ThermostatTemperatureSetpoint.SetCool\",\n          {['coolCelsius'] = roundedValue},\n          function()\n              self:updateProperty(\"coolingThermostatSetpoint\", roundedValue)\n          end\n      )\n    elseif (self.properties.thermostatMode == \"Auto\")\n    then\n      self:debug('Original heatingThermostatSetpoint ' .. self.properties.heatingThermostatSetpoint)\n      self:callNestApi(\"sdm.devices.commands.ThermostatTemperatureSetpoint.SetRange\",\n          {['heatCelsius'] = self.properties.heatingThermostatSetpoint, ['coolCelsius'] = roundedValue},\n          function()\n              self:updateProperty(\"coolingThermostatSetpoint\", roundedValue)\n          end\n      )\n    end\nend\n\n--When the unit is in Fahrenheit, convert the value to Celsius\nfunction NestThermostat:getDegreesCelsius(value)\n  local degreesC = value\n  if (self.properties.unit == 'F')\n    then\n        degreesC = (degreesC - 32) * 5 / 9\n        self:debug(string.format('Converting %.3f°F to %.3f°C', value, degreesC))\n    end\n    return math.ceil(degreesC * 10) / 10\nend\n\n-- Call Nest API\nfunction NestThermostat:callNestApi(command, params, callback)\n    local message = string.format(\"%s (%s)\", command, json.encode(params))\n    local url = string.format(\"https://smartdevicemanagement.googleapis.com/v1/%s:executeCommand\", self:getVariable(\"uid\"))\n\n    self.parent.http:request(url, {\n        options = {\n            checkCertificate = true,\n            method = 'POST',\n            headers = {\n                 ['Content-Type'] = \"application/json; charset=utf-8\",\n                 ['Authorization'] = self.parent.accessToken\n            },\n            data = json.encode({\n                    ['command'] = command,\n                    ['params'] = params\n                })\n        },\n        success = function(response)\n            if response.status == 200 then\n                self:debug(\"callNestApi() success \" .. message)\n                callback()\n            else\n                self:error(\"callNestApi() \" .. message .. \" status is \" .. response.status .. \": \" ..  response.data)\n            end\n        end,\n        error = function(error)\n            self:error(\"callNestApi() \" .. message ..\" failed: \" .. json.encode(error))\n        end\n    })\nend\n"},{"name":"Humidity","isMain":false,"isOpen":false,"content":"-----------------------------------------------------------------------------\n--                  NEST THERMOSTAT                                        --\n--                  type: com.fibaro.humiditySensor                        --\n-----------------------------------------------------------------------------\n\nclass 'NestThermostatHumidity' (QuickAppChild)\n\n-- __init is a constructor for this class. All new classes must have it.\nfunction NestThermostatHumidity:__init(device)\n    -- You should not insert code before QuickAppChild.__init. \n    QuickAppChild.__init(self, device) \n    self:trace(\"NestThermostatHumidity init\")\nend\n\nfunction NestThermostatHumidity:updateDevice(body)\n    local temp = body['traits']['sdm.devices.traits.Humidity']['ambientHumidityPercent']\n    self:updateProperty(\"value\", temp)\nend"},{"name":"Temperature","isMain":false,"isOpen":false,"content":"-----------------------------------------------------------------------------\n--                  NEST THERMOSTAT                                        --\n--                  type: com.fibaro.temperatureSensor                     --\n-----------------------------------------------------------------------------\n\n-- Temperature sensor type have no actions to handle\nclass 'NestThermostatTemperature' (QuickAppChild)\n\nfunction NestThermostatTemperature:__init(device)\n    QuickAppChild.__init(self, device) \n    self:trace(\"NestThermostatTemperature init\")\nend\n\nfunction NestThermostatTemperature:updateDevice(body)\n    -- self:debug(\"updateDevice \" .. self.id .. \" with body \" .. json.encode(body))\n    local temp = body['traits']['sdm.devices.traits.Temperature']['ambientTemperatureCelsius']\n    self:updateProperty(\"value\", temp)\nend"},{"name":"Motion","isMain":false,"isOpen":false,"content":"-----------------------------------------------------------------------------\n--                  NEST CAMERA (doorBeel, Hub, ...)                       --\n--                  type: com.fibaro.motionSensor                          --\n-----------------------------------------------------------------------------\n\n-- Trigger only on person motion\n\nclass 'NestMotionPerson' (QuickAppChild)\n\nfunction NestMotionPerson:__init(device)\n    QuickAppChild.__init(self, device) \n    self:trace(\"NestMotionPerson init\")\n\n    self.lastMotion = 0\n    self:mainLoop()\nend\n\n-- main loop\nfunction NestMotionPerson:mainLoop()\n    self:refresh()\n\n    fibaro.setTimeout(10 * 1000, function()\n        self:mainLoop()\n    end)\nend\n\nfunction NestMotionPerson:updateDevice(body)\n    --self:debug(\"updateDevice \" .. self.id .. \" with body \" .. json.encode(body))\n\n    local offset = os.time() - os.time(os.date(\"!*t\"))\n    \n    local date_string = body['timestamp']\n    local pattern = \"(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)%.%d+Z\"\n    local year, month, day, hour, min, sec = date_string:match(pattern)\n    local eventTime = os.time({year = year, month = month, day = day, hour = hour, min = min, sec = sec}) + offset\n\n    if eventTime > self.lastMotion\n    then\n        self.lastMotion = eventTime\n        self:refresh()\n    end\nend\n\nfunction NestMotionPerson:refresh()\n    local delta = os.time(os.date(\"!*t\")) - self.lastMotion\n\n    --self:debug(\"refresh()\", \"Duration since last motion \" .. delta .. \" seconds\")\n\n    if (delta < 60)\n    then\n       self:updateProperty('value', true)\n       self:updateView(\"presenceStatus\", \"text\", \"Breached\")\n    else\n       self:updateProperty('value', false)\n       self:updateView(\"presenceStatus\", \"text\", \"Not breached\")\n    end\nend\n"},{"name":"PubSub","isMain":false,"isOpen":true,"content":"-----------------------------------------------------------------------------\n--                  LISTEN NEST EVENT                                      --\n--                  required for motion sensor                             --\n-----------------------------------------------------------------------------\n\n\n\n-- PubSub Event\nfunction QuickApp:getPubSubEvent()\n    if self.step == \"nothing\"\n    then\n        return\n    end\n    if self.step ~= \"device\"\n    then\n        fibaro.setTimeout(self.frequency * 1000, function()\n            self:getPubSubEvent()\n        end)\n        return\n    end\n\n    self.pubsub:request(\"https://pubsub.googleapis.com/v1/projects/\" .. self.gcpProjectId .. \"/subscriptions/\" .. self.subscription .. \":pull\" , {\n        options = {\n            checkCertificate = true,\n            method = 'POST',\n            headers = {\n                 ['Content-Type'] = \"application/json; charset=utf-8\",\n                 ['Authorization'] = self.accessToken\n            },\n            data = json.encode({\n                    ['maxMessages'] = 200\n                })\n        },\n        success = function(response)\n            if response.status == 200 then\n                body = json.decode(response.data)\n                self:updatePubSubEvent(body)\n                fibaro.setTimeout(500, function()\n                    self:getPubSubEvent()\n                end)\n            else\n                self:error(\"getPubSubEvent() status is \" .. response.status .. \": \" .. response.data)\n                fibaro.setTimeout(5000, function()\n                    self:getPubSubEvent()\n                end)\n            end\n        end,\n        error = function(error)\n            self:error(\"getPubSubEvent() failed: \" .. json.encode(error))\n            fibaro.setTimeout(5000, function()\n                self:getPubSubEvent()\n            end)\n        end\n    })\nend\n\nfunction QuickApp:updatePubSubEvent(body)\n  messages = body['receivedMessages']\n  --self:debug(\"updatePubSubEvent()\", json.encode(messages))\n\n  if messages == nil\n  then\n    return\n  end\n\n  local messageCount = 0\n  local acksIds = {}\n\n  for i, message in ipairs(messages)\n  do\n    local encodedData = message['message']['data']\n    local dataString = self:base64_decode(encodedData)\n    local data = json.decode(dataString)\n    local event = \"\"\n    local date = nil\n    local name = nil\n\n    messageCount = messageCount + 1\n    acksIds[messageCount] = message['ackId']\n\n    if data['resourceUpdate'] ~= nil and data['resourceUpdate']['events'] ~= nil\n    then\n      event = data['resourceUpdate']['events']\n      name = data['resourceUpdate']['name']\n    end\n\n    if event['sdm.devices.events.CameraPerson.Person'] ~= nil\n    then\n      local fibaroDevice = self:getOrCreateChildDevice(name .. \"Motion\", data, \"com.fibaro.motionSensor\")\n      fibaroDevice:updateDevice(data)\n    elseif event['sdm.devices.events.DoorbellChime.Chime'] ~= nil\n    then\n      local fibaroDevice = self:getOrCreateChildDevice(name .. \"Chime\", data, \"com.fibaro.motionSensor\")\n      fibaroDevice:updateDevice(data)\n    end\n  end\n\n  if messageCount > 0\n  then\n      self:acknowledge(acksIds)\n  end\nend\n\n\n\nfunction QuickApp:base64_decode(input)\n    local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\n    input = string.gsub(input, '[^'..b..'=]', '')\n    input = string.gsub(input, '=', string.char(0))\n    input = string.gsub(input, '.', function(x)\n        if (x == string.char(0)) then return '' end\n        local r, f = '', (b:find(x)-1)\n        for i = 6, 1, -1 do\n            r = r..(f % 2 ^ i - f % 2 ^ (i-1) > 0 and '1' or '0')\n        end\n        return r;\n    end)\n    input = string.gsub(input, '%d%d%d?%d?%d?%d?%d?%d?', function(x)\n        if (#x ~= 8) then return '' end\n        local c = 0\n        for i = 1, 8 do c = c + (x:sub(i,i) == '1' and 2^(8-i) or 0) end\n        return string.char(c)\n    end)\n\n    return input\nend\n\nfunction QuickApp:acknowledge(acksIds)\n    self.pubsub:request(\"https://pubsub.googleapis.com/v1/projects/\" .. self.gcpProjectId .. \"/subscriptions/\" .. self.subscription .. \":acknowledge\" , {\n        options = {\n            checkCertificate = true,\n            method = 'POST',\n            headers = {\n                 ['Content-Type'] = \"application/json; charset=utf-8\",\n                 ['Authorization'] = self.accessToken\n            },\n            data = json.encode({\n                    ['ackIds'] = acksIds\n                })\n        },\n        success = function(response)\n            if response.status == 200 then\n                if self.maxLogDebugPubSub > 0\n                then\n                    self:debug(\"acknowledge OK for \" .. #acksIds .. \" events\")\n                    self.maxLogDebugPubSub = self.maxLogDebugPubSub - 1\n                elseif self.maxLogDebugPubSub == 0\n                then\n                    self:debug(\"next acknowledge will not be logged\")\n                    self.maxLogDebugPubSub = self.maxLogDebugPubSub - 1\n                end\n            else\n                self:error(\"acknowledge() for \" .. #acksIds .. \" events, status is \" .. response.status .. \": \" .. response.data)\n            end\n        end,\n        error = function(error)\n            self:error(\"acknowledge() for \" .. #acksIds .. \" events failed: \" .. json.encode(error))\n        end\n    })\nend\n"}]}